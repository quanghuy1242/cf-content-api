// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator zod {
  provider = "npx zod-prisma-types"
  output   = "../src/schema/generated/zod"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @unique
  name         String
  emailAddress String    @unique /// z.string().email()
  contents     Content[]
  Image        Image[]
}

/// @zod.import(["import { StatusEnum } from 'schema/content';"])
model Category {
  id          String @id @default(uuid()) /// @zod.custom.omit([input])
  name        String @unique
  description String

  status   String /// @zod.custom.use(StatusEnum)
  modified DateTime @updatedAt /// @zod.custom.omit([input])
  created  DateTime @default(now()) /// @zod.custom.omit([input])

  contents Content[]
}

/// @zod.import(["import { MetaSchema, TagSchema, StatusEnum } from 'schema/content';"])
model Content {
  id String @id @default(uuid()) /// @zod.custom.omit([input])

  title      String @unique
  slug       String @unique /// @zod.string.regex(/^[a-z0-9-_]*$/, {message: "Slug URL path must only contain alphabetic character, number and - or _"})
  content    String
  coverImage String /// @zod.string.url({ message: "URL must be a correct url address" })
  tags       String /// @zod.custom.use(TagSchema)
  meta       String /// @zod.custom.use(MetaSchema)
  categoryId String

  status   String /// @zod.custom.use(StatusEnum.default("PENDING"))
  userId   String
  modified DateTime @updatedAt /// @zod.custom.omit([input])
  created  DateTime @default(now()) /// @zod.custom.omit([input])

  author   User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

model Image {
  id String @id @default(uuid()) /// @zod.custom.omit([input])

  description String
  size        Int
  contentType String

  fullPath    String /// @zod.custom.omit([input])
  previewPath String /// @zod.custom.omit([input])

  userId String

  tags     String /// @zod.custom.use(TagSchema)
  status   String /// @zod.custom.use(StatusEnum.default("PENDING")).omit([input])
  modified DateTime @updatedAt /// @zod.custom.omit([input])
  created  DateTime @default(now()) /// @zod.custom.omit([input])

  auther User @relation(fields: [userId], references: [id])
}
